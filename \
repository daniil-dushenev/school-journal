# -*- coding: utf-8 -*-
import logging

from logging import INFO
import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import locale
import pytz
from datetime import datetime, timedelta

import main, crypto
logging.basicConfig(filename="/var/log/tgbot/tgbot.log", filemode="w", format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

bot = telebot.TeleBot('5296800210:AAHCEde6JJpJZoZQpisQylxjXXDR1nMmeGI')
locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')

msc = pytz.timezone('Africa/Kampala')
@bot.message_handler(commands=['start'])
def start(msg):
    try:
        main.get_developer_info(msg.chat.id)[0]
        bot.send_message(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', reply_markup=gen_markup())

    except:
        bot.send_message(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤—Ö–æ–¥–∞ –≤ —Å–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª.')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå")
        markup.add(item)
        main.insert_dict(msg.from_user.id, 'shedule', '1')
        sent = bot.send_message(msg.chat.id, '–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ª–æ–≥–∏–Ω:',
                                reply_markup=markup)
        bot.register_next_step_handler(sent, login)


@bot.message_handler(commands=['menu'])
def menu(msg):
    bot.send_message(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', reply_markup=gen_markup())


def gen_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("–¢–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏üìä", callback_data="marks"),
               InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì", callback_data="schedule"))
    markup.add(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏üõ†", callback_data="settings"))
    return markup

def set_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å", callback_data="set_login"))
    markup.add(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="set_shedule"))
    return markup


def shedule_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å", callback_data="shedule_1"))
    markup.add(InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å", callback_data="shedule_2"))
    markup.add(InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="shedule_3"))
    return markup

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "marks":
        data = main.get_developer_info(call.from_user.id)
        login_login = data[0]
        logging.info(login_login)
        password = crypto.decode(str(call.from_user.id), data[1], data[2], data[3])
        if data == None:
            bot.send_message(call.from_user.id, '–û—à–∏–±–∫–∞üö´\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ü–µ–Ω–∫–∞–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        else:
            mes = bot.send_message(call.from_user.id, '–ó–∞–≥—Ä—É–∑–∫–∞...')
            marks = main.check_marks(login_login, password)
            if marks:
                text = 'üìà*–û—Ü–µ–Ω–∫–∏ –Ω–∞ ' + datetime.now(tz=msc).strftime("%d.%m.%Y") + '*üìÖ\n'
                for key in marks:
                    if key == 'average':
                        text += '_–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º:_ *' + marks[key] + '*'
                    else:
                        text += '_' + key.capitalize() + ':_ |' + marks[key]['marks'] + ' - *' + marks[key]['average_mark'] + '*\n'
                bot.edit_message_text(chat_id=call.from_user.id, message_id=mes.message_id, text=text, parse_mode='Markdown', reply_markup=gen_markup())
                logging.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
            else:
                bot.send_message(call.from_user.id, '–û—à–∏–±–∫–∞üö´\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ü–µ–Ω–∫–∞–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')

    if call.data == 'schedule':
        mes = bot.send_message(call.from_user.id, '–ó–∞–≥—Ä—É–∑–∫–∞...')
        data = main.get_developer_info(call.from_user.id)
        login_login = data[0]
        id_shedule = int(main.get_dict(call.from_user.id, 'shedule'))
        password = crypto.decode(str(call.from_user.id), data[1], data[2], data[3])
        if data == None:
            bot.send_message(call.from_user.id, '–û—à–∏–±–∫–∞üö´\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
        else:
            schedule = main.check_schedule(login_login, password)
            today = datetime.now(tz=msc)
            if schedule:
                text = 'üìà*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ' + today.strftime("%d.%m.%Y") + '*üìÖ'
                for key in schedule:
                    if id_shedule == 1:
                        if key == today.strftime("%Y-%m-%d"):
                            count = 1
                            text += f'\n\n*{today.strftime("%A").title()}*\n'

                            try:
                                for lesson in schedule[key]:
                                    text += f'*{count}* - _' + lesson.title() + '_\n'
                                    count += 1
                            except:
                                text += '–ù–µ—Ç —É—Ä–æ–∫–æ–≤'
                    if id_shedule == 2:
                        tomorrow = today + timedelta(days=1)
                        print(tomorrow)
                        if key == today.strftime("%Y-%m-%d"):
                            count = 1
                            text += f'\n\n*{today.strftime("%A").title()}*\n'
                            try:
                                for lesson in schedule[key]:
                                    text += f'*{count}* - _' + lesson.title() + '_\n'
                                    count += 1
                            except:
                                text += '–ù–µ—Ç —É—Ä–æ–∫–æ–≤'
                        if key == tomorrow.strftime("%Y-%m-%d"):
                            count = 1
                            text += f'\n*{tomorrow.strftime("%A").title()}*\n'
                            try:
                                for lesson in schedule[key]:
                                    text += f'*{count}* - _' + lesson.title() + '_\n'
                                    count += 1
                            except:
                                text += '–ù–µ—Ç —É—Ä–æ–∫–æ–≤'
                    if id_shedule == 3:
                        count = 1
                        text += f'\n*{datetime.strptime(key, "%Y-%m-%d").strftime("%A").title()}*\n'
                        try:
                            for lesson in schedule[key]:
                                text += f'*{count}* - _' + lesson.title() + '_\n'
                                count += 1
                        except:
                            text += '–ù–µ—Ç —É—Ä–æ–∫–æ–≤\n'

                bot.edit_message_text(chat_id=call.from_user.id, message_id=mes.message_id, text=text,
                                      parse_mode='Markdown', reply_markup=gen_markup())                
               
                logging.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
            else:
                bot.send_message(call.from_user.id, '–û—à–∏–±–∫–∞üö´\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')


    if call.data == 'settings':
        bot.send_message(chat_id=call.from_user.id, text='–ö–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=set_markup())

    if call.data == 'set_login':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå")
        markup.add(item)
        sent = bot.send_message(call.from_user.id, '–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ª–æ–≥–∏–Ω:',
                                reply_markup=markup)
        bot.register_next_step_handler(sent, login)

    if call.data == 'set_shedule':
        bot.send_message(call.from_user.id, '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:', reply_markup=shedule_markup())

    if call.data == 'shedule_1':
        main.update_dict(call.from_user.id, 'shedule', '1')
        bot.send_message(call.from_user.id, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', reply_markup=gen_markup())

    if call.data == 'shedule_2':
        main.update_dict(call.from_user.id, 'shedule', '2')
        bot.send_message(call.from_user.id, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', reply_markup=gen_markup())

    if call.data == 'shedule_3':
        main.update_dict(call.from_user.id, 'shedule', '3')
        bot.send_message(call.from_user.id, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', reply_markup=gen_markup())


def login(msg):
    if msg.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        bot.send_message(msg.chat.id, '–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏..', reply_markup=gen_markup())
    else:
        if main.get_developer_info(msg.chat.id) == None:
            main.insert_varible_into_table(msg.chat.id, msg.text)
        else:
            main.update_sqlite_table(msg.chat.id, msg.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå")
        markup.add(item)
        sent = bot.send_message(msg.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∂—É—Ä–Ω–∞–ª–∞:', reply_markup=markup)
        bot.register_next_step_handler(sent, password)


def password(msg):
    if msg.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        bot.send_message(msg.chat.id, '–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏..', reply_markup=gen_markup())
    else:
        main.update_password(msg.chat.id, msg.text)
        bot.send_message(msg.chat.id, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!', reply_markup=gen_markup())




logging.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

bot.infinity_polling()
