import logging

import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import locale

import datetime

import main, crypto

logging.basicConfig(level=logging.INFO)

bot = telebot.TeleBot('5296800210:AAHCEde6JJpJZoZQpisQylxjXXDR1nMmeGI')
locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')


def send_marks(id):
    data = main.get_developer_info(id)
    login_login = data[0]
    password = crypto.decode(str(id), data[1], data[2], data[3])
    if data == None:
        bot.send_message(id, '–û—à–∏–±–∫–∞üö´\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ü–µ–Ω–∫–∞–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    else:
        mes = bot.send_message(id, '–ó–∞–≥—Ä—É–∑–∫–∞...')
        marks = main.check_marks(login_login, password)
        if marks:
            text = 'üìà*–û—Ü–µ–Ω–∫–∏ –Ω–∞ ' + datetime.date.today().strftime("%d.%m.%Y") + '*üìÖ\n'
            for key in marks:
                if key == 'average':
                    text += '_–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º:_ *' + marks[key] + '*'
                else:
                    text += '_' + key.capitalize() + ':_ ' + marks[key]['marks'] + ' - *' + marks[key]['average_mark'] + '*\n'
            bot.edit_message_text(chat_id=id, message_id=mes.message_id, text=text, parse_mode='Markdown', reply_markup=gen_markup())
            print('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        else:
            bot.send_message(id, '–û—à–∏–±–∫–∞üö´\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ü–µ–Ω–∫–∞–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')


def send_schedule_day(id):
    data = main.get_developer_info(id)
    login_login = data[0]
    password = crypto.decode(str(id), data[1], data[2], data[3])
    if data == None:
        bot.send_message(id, '–û—à–∏–±–∫–∞üö´\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
    else:
        mes = bot.send_message(id, '–ó–∞–≥—Ä—É–∑–∫–∞...')
        schedule = main.check_schedule(login_login, password)
        today = datetime.date.today()
        if schedule:
            text = 'üìà*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ' + today.strftime("%d.%m.%Y") + '*üìÖ\n\n' \
                                        f'*{today.strftime("%A").title()}*\n' \

            for key in schedule:
                if key == today.strftime("%Y-%m-%d"):
                    count = 1
                    if schedule[key] != None:
                        for lesson in schedule[key]:
                            text += f'*{count}* - _' + lesson.title() + '_\n'
                            count += 1
                    else:
                        text += '–£—Ä–æ–∫–æ–≤ –Ω–µ—Ç'
            bot.edit_message_text(chat_id=id, message_id=mes.message_id, text=text,
                                  parse_mode='Markdown', reply_markup=gen_markup())
            print('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        else:
            bot.send_message(id, '–û—à–∏–±–∫–∞üö´\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')


def send_schedule_week(id):
    data = main.get_developer_info(id)
    login_login = data[0]
    password = crypto.decode(str(id), data[1], data[2], data[3])
    if data == None:
        bot.send_message(id, '–û—à–∏–±–∫–∞üö´\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
    else:
        mes = bot.send_message(id, '–ó–∞–≥—Ä—É–∑–∫–∞...')
        schedule = main.check_schedule(login_login, password)
        today = datetime.date.today()
        if schedule:
            text = 'üìà*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ' + today.strftime("%d.%m.%Y") + '*üìÖ\n'

            for key in schedule:
                today = datetime.datetime.strptime(key, '%Y-%m-%d').strftime("%A")

                text += f'\n*{today.title()}*\n'
                count = 1
                if schedule[key] != None:
                    for lesson in schedule[key]:
                        text += f'*{count}* - _' + lesson.title() + '_\n'
                        count += 1
                else:
                    text += '–£—Ä–æ–∫–æ–≤ –Ω–µ—Ç\n'
            bot.edit_message_text(chat_id=id, message_id=mes.message_id, text=text,
                                  parse_mode='Markdown', reply_markup=gen_markup())
            print('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        else:
            bot.send_message(id, '–û—à–∏–±–∫–∞üö´\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')



@bot.message_handler(commands=['start'])
def start(msg):
    try:
        main.get_developer_info(msg.chat.id)[0]
        bot.send_message(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', reply_markup=gen_markup())

    except:
        bot.send_message(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤—Ö–æ–¥–∞ –≤ —Å–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª.')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå")
        markup.add(item)
        sent = bot.send_message(msg.chat.id, '–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ª–æ–≥–∏–Ω:',
                                reply_markup=markup)
        bot.register_next_step_handler(sent, login)


@bot.message_handler(commands=['menu'])
def menu(msg):
    bot.send_message(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', reply_markup=gen_markup())


@bot.message_handler(commands=['marks'])
def marks_com(msg):
    send_marks(msg.from_user.id)


@bot.message_handler(commands=['schedule'])
def marks_com(msg):
    send_schedule_day(msg.from_user.id)


@bot.message_handler(commands=['schedule_week'])
def marks_com(msg):
    send_schedule_week(msg.from_user.id)


@bot.message_handler(commands=['settings'])
def settings(msg):
    is_notifications = main.get_is_notifications(msg.from_user.id)
    bot.send_message(chat_id=msg.from_user.id, text='–ö–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=settings_markup(is_notifications))



def gen_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("–¢–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏üìä", callback_data="marks"))
    markup.add(InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—åüóì", callback_data="schedule_day"))
    markup.add(InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—éüóì", callback_data="schedule_week"))
    markup.add(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏üõ†", callback_data="settings"))
    return markup


def settings_markup(is_notifications):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å", callback_data="set_login"))

    if is_notifications:
        s = '–í—ã–∫–ª—é—á–∏—Ç—å'
        command = 'off_nottif'
    else:
        s = '–í–∫–ª—é—á–∏—Ç—å'
        command = 'on_nottif'
    markup.add(InlineKeyboardButton(s + " —É–≤–µ–¥–º–æ–ª–µ–Ω–∏—è –æ–± –æ—Ü–µ–Ω–∫–∞—Ö", callback_data=command))
    return markup


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "marks":
        send_marks(call.from_user.id)

    if call.data == 'schedule_day':
        send_schedule_day(call.from_user.id)

    if call.data == 'schedule_week':
        send_schedule_week(call.from_user.id)

    if call.data == 'settings':
        is_notifications = main.get_is_notifications(call.from_user.id)
        bot.send_message(chat_id=call.from_user.id, text='–ö–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=settings_markup(is_notifications))

    if call.data == 'set_login':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå")
        markup.add(item)
        sent = bot.send_message(call.from_user.id, '–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∂—É—Ä–Ω–∞–ª –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ª–æ–≥–∏–Ω:',
                                reply_markup=markup)
        bot.register_next_step_handler(sent, login)

    if call.data == 'on_nottif':
        mes = bot.send_message(call.from_user.id, '–°–µ–∫—É–Ω–¥–æ—á–∫—É...')
        data = main.get_developer_info(call.from_user.id)
        login = data[0]
        password = crypto.decode(str(call.from_user.id), data[1], data[2], data[3])

        marks_data = main.check_marks(login, password)
        for discipline in marks_data:
            if discipline != 'average':
                marks = marks_data[discipline]['marks']
                main.insert_marks(call.from_user.id, marks, discipline)
        bot.edit_message_text(chat_id=call.from_user.id, message_id=mes.message_id, text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ü–µ–Ω–∫–∞—Ö —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã!', reply_markup=gen_markup())

    if call.data == 'off_nottif':
        main.delete_marks(call.from_user.id)
        bot.send_message(call.from_user.id, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ü–µ–Ω–∫–∞—Ö —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω—ã!', reply_markup=gen_markup())


def login(msg):
    if msg.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        bot.send_message(msg.chat.id, '–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏..', reply_markup=gen_markup())
    else:
        if main.get_developer_info(msg.chat.id) == None:
            main.insert_varible_into_table(msg.chat.id, msg.text)
        else:
            main.update_sqlite_table(msg.chat.id, msg.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå")
        markup.add(item)
        sent = bot.send_message(msg.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∂—É—Ä–Ω–∞–ª–∞:', reply_markup=markup)
        bot.register_next_step_handler(sent, password)


def password(msg):
    if msg.text == '–û—Ç–º–µ–Ω–∞‚ùå':
        bot.send_message(msg.chat.id, '–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏..', reply_markup=gen_markup())
    else:
        main.update_password(msg.chat.id, msg.text)
        bot.send_message(msg.chat.id, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!', reply_markup=gen_markup())





print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

bot.infinity_polling()
